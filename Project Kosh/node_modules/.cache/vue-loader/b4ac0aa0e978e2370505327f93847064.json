{"remainingRequest":"/Users/murphyren/Desktop/170/nn/final-project-team-peach/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/murphyren/Desktop/170/nn/final-project-team-peach/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/murphyren/Desktop/170/nn/final-project-team-peach/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/murphyren/Desktop/170/nn/final-project-team-peach/src/components/BusiInfoList.vue?vue&type=template&id=2c191125&","dependencies":[{"path":"/Users/murphyren/Desktop/170/nn/final-project-team-peach/src/components/BusiInfoList.vue","mtime":1607279539876},{"path":"/Users/murphyren/Desktop/170/nn/final-project-team-peach/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/murphyren/Desktop/170/nn/final-project-team-peach/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/murphyren/Desktop/170/nn/final-project-team-peach/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/murphyren/Desktop/170/nn/final-project-team-peach/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}